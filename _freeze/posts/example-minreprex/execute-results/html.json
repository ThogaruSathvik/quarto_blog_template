{
  "hash": "359414596bd0bd81aa94cb19b9bda0d5",
  "result": {
    "markdown": "---\ntitle: \"Example of Minimal Reproducible Examples\"\nauthor: \"Meredith Rolfe\"\ndesription: \"If you need help, use a minimal reproducible example to get the most useful input.\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-copy: true\n    code-tools: true\ncategories:\n  - example\n  - minimal example\n---\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n## Example 1\n\nA student had an untidy dataset and was trying to figure out how to find summary statistics by year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <-tibble(year = c(\"1991\", \"1992\"),\n              value1 = c(3.4, 4.3),\n              value2 = c(4.5, 5.8))\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  year  value1 value2\n  <chr>  <dbl>  <dbl>\n1 1991     3.4    4.5\n2 1992     4.3    5.8\n```\n:::\n:::\n\n\nNow that we have a basic example of the dataset - stripping out other variables and only using 2 or 3 cases that capture the range and format of values - it is easy to provide example code for a solution!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata%>%\n  pivot_longer(-year, \n               names_to = \"value\",\n               values_to = \"production\")%>%\n  group_by(year)%>%\n  summarise(year_max = max(production))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  year  year_max\n  <chr>    <dbl>\n1 1991       4.5\n2 1992       5.8\n```\n:::\n:::\n\n\n## Example 2\n\nIn this instance, the student wanted to find the mode of multiple character or factor variables at the same time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf<- tibble(var1= c(\"a\", \"b\", \"a\"),\n            var2= c(\"c\", \"c\", \"a\"))\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  var1  var2 \n  <chr> <chr>\n1 a     c    \n2 b     c    \n3 a     a    \n```\n:::\n:::\n\n\nAgain, this simple example strips away all the complexity of the actual data into two simple character variables with similar names. (the similar names can be critical, although there are other select functions that can work!)\n\nBecause we are interested in finding the mode, I created a custom functon to find the mode!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmode<-function(x){\n  names(which.max(table(x))) \n}\n\ndf%>%\n  summarise(across(starts_with(\"var\"),\n                   ~ mode(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  var1  var2 \n  <chr> <chr>\n1 a     c    \n```\n:::\n:::\n\n## Example 3\n\nIn this case, a student wanted to know how to replace the string \"NA\" with a system missing value. Again, it is easiest to start with realistic data to provide a solution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <-tibble(x = c(2, \"NA\"), y = c(4,5))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  x         y\n  <chr> <dbl>\n1 2         4\n2 NA        5\n```\n:::\n:::\n\nAs can be seen, the fundamental issue is that replacing the string NA with a true `NA` is not enough - we also need to change the type of the *x* variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf%>%\n  mutate(x = ifelse(x==\"NA\", NA_character_, x),\n         x = as.numeric(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n      x     y\n  <dbl> <dbl>\n1     2     4\n2    NA     5\n```\n:::\n:::\n\n\n## Example 4\n\nA student had a dataframe where one of the variables had a long list of text in a single variable. The text was only somewhat systematic, and needed some modifications before a function like `separate` would work correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf<-tibble(year = c(2019, 2019),\n           longstring = c(\"Illiterate youth population, 15-24 years, urban,female (number)\", \n                          \"Youth illiterate population, 15-24 years, male (number)\"))\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n   year longstring                                                     \n  <dbl> <chr>                                                          \n1  2019 Illiterate youth population, 15-24 years, urban,female (number)\n2  2019 Youth illiterate population, 15-24 years, male (number)        \n```\n:::\n:::\n\n\nWith this representation, we can see the issue is the the *total* tag is missing sometimes in the urban/rural slot, so lets just put it in the string \"total\" to make the text more systematic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf%>%\n  mutate(longstring = str_replace(longstring,\n                     \"years, ([mf])\", \"years, total, \\\\1\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n   year longstring                                                     \n  <dbl> <chr>                                                          \n1  2019 Illiterate youth population, 15-24 years, urban,female (number)\n2  2019 Youth illiterate population, 15-24 years, total, male (number) \n```\n:::\n:::\n\n\n## Example 5\n\nAnother case where we need to pivot to tidy the data. Once again, lets start with a simple example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-tibble(year=c(1991, 1992), male=c(10.1, 8.2), female=c(12.2, 10.5))\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n   year  male female\n  <dbl> <dbl>  <dbl>\n1  1991  10.1   12.2\n2  1992   8.2   10.5\n```\n:::\n:::\n\nThis image makes it easy to see we need to pivot longer with gender to make this tidy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-pivot_longer(data, cols=male:female, \n             names_to = \"gender\", \n             values_to = \"depression\")\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n   year gender depression\n  <dbl> <chr>       <dbl>\n1  1991 male         10.1\n2  1991 female       12.2\n3  1992 male          8.2\n4  1992 female       10.5\n```\n:::\n\n```{.r .cell-code}\ndata%>%\n  group_by(year)%>%\n  summarise(depression = mean(depression))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n   year depression\n  <dbl>      <dbl>\n1  1991      11.1 \n2  1992       9.35\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}